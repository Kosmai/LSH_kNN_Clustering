Αναζήτηση και Συσταδοποίηση Διανυσμάτων στη C++

Μέλη Ομάδας
-------------------------------------------------------------------------------------------------------------
Κωνσταντίνος Μαϊδάτσης (ΑΜ: 1115201800102)
Διονύσιος Μανιατάκος   (ΑΜ: 1115201800104)

Σύντομη Περιγραφή
-------------------------------------------------------------------------------------------------------------
Το συγκεκριμένο πρόγραμμα στοχεύει στην εύρεση πλησιέστερων γειτόνων και στη συσταδοποίηση διανυσμάτων
χρησιμοποιώντας προσεγγιστικούς αλγορίθμους και αντιπαραβάλλοντας τους με ακριβείς αλγορίθμους (ωμής βίας).
Πιο συγκεκριμένα, για την αναζήτηση πλησιέστεργων γειτόνων χρησιμοποιείται, εκτός από την εξαντλητική
αναζήτηση, ο αλγόριθμος "Locality Sensitive Hashing" ("LSH") και ο αλγόριθμος τυχαίας προβολής στον υπερκύβο.
Για τη συσταδοποίηση (K-Means), χρησιμοποιείται ο άκριβής αλγόριθμος "Lloyd" και η αντίστροφη ανάθεση μέσω
Range Search τόσο με τη χρήση του "LSH" αλγορίθμου όσο και με τη χρήση του αλγορίθμου προβολής στον υπερκύβο.
Η μετρική της απόστασης που χρησιμοποιείται είναι η μετρική L2 (ευκλείδεια απόσταση). Το πρόγραμμα είναι 
υλοποιημένο σε C++.

Οδηγίες Μεταγλώττισης 
-------------------------------------------------------------------------------------------------------------
Για τη μεταγλώττιση του προγράμματος αρκεί να εκτελεστεί στον κεντρικό κατάλογο η εντολή "make" η οποία,
αξιοποιώντας το Makefile, δημιουργεί τρία εκτελέσιμα αρχεία, δύο για την εύρεση πλησιέστερων γειτόνων (το
ένα "LSH" και το άλλο με τυχαία προβολή σε υπερκύβο) και ένα για τη συσταδοποίηση. Προϋπόθεση για την επιτυχή 
μεταγλώττιση είναι να είναι εγκατεστημένος ο μεταγλωττιστής g++. Οι οδηγίες εκτέλεσης παρατίθενται παρακάτω.

Οδηγίες Εκτέλεσης & Χρήσης
-------------------------------------------------------------------------------------------------------------
->	Για την εύρεση πλησιέστερων γειτόνων με τη χρήση του αλγορίθμου "LSH" αρκεί να εκτελεστεί το εκτελέσιμο 
	αρχείο "lsh" που έχει παραχθεί από τη μεταγλώττιση με τα παρακάτω ορίσματα:

	./lsh -i <input file> -q <query file> -k <int> -L <int> -ο <output file> -Ν <number of nearest> -R <radius>

	Παράδειγμα εκτέλεσης:
	./lsh -i input_small_id -q query_small_id -k 5 -L 5 -ο lsh.out -Ν 5 -R 300



->	Για την εύρεση πλησιέστερων γειτόνων με τη χρήση του αλγορίθμου προβολής σε υπερκύβο αρκεί να εκτελεστεί 
	το εκτελέσιμο αρχείο "cube" που έχει παραχθεί από τη μεταγλώττιση με τα παρακάτω ορίσματα:

	./cube -i <input file> -q <query file> -k <int> -L <int> -M <int> -probes <int> -ο <output file> -Ν <number of nearest> -R <radius>

	Παράδειγμα εκτέλεσης:
	./cube -i input_small_id -q query_small_id -k 5 -L 5 -M 5 -probes 5 -ο cube.out -Ν 5 -R 500

->	Για τη συσταδοποίηση διανυσμάτων αρκεί να εκτελεστεί το αρχείο "cluster" που έχει παραχθεί από τη
	μεταγλώττιση με τα παρακάτω ορίσματα:

	./cluster -i <input file> -c <configuration file> -o <output file> -complete <optional> -m <method: Classic OR LSH or Hypercube>

	Παράδειγμα εκτέλεσης:
	./cluster -i input_small_id -c cluster.config -o cluster.out -complete -m LSH

	Είναι απαιραίτητο να υπάρχει ένα αρχείο configuration με την ακόλουθη μορφή:

	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	number_of_clusters: <int>
	number_of_vector_hash_tables: <int>
	number_of_vector_hash_functions: <int>
	max_number_M_hypercube: <int>
	number_of_hypercube_dimensions: <int>
	number_of_probes: <int>
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Στις εντολές εκτέλεσης είναι εφικτό τα ορίσματα να δίνονται με διαφορετική σειρά. Αν δε δοθεί κάποιο όρισμα
χρησιμοποιείται η default τιμή ή ζητείται από τον χρήστη (στην περίπτωση των αρχείων του συνόλου δεδομένων,
του αρχείου ερωτημάτων και του αρχείου εξόδου).


Περιγραφή Καταλόγων & Modules
-------------------------------------------------------------------------------------------------------------
Στον κατάλογο του προγράμματος υπάρχουν τρεις υποκατάλογοι. Ο κατάλογος "src" περιλαμβάνει όλα τα αρχεία
πηγαίου κώδικα και ο κατάλογος "inc" τα αρχεία επικεφαλίδων. Ο κατάλογος config περιλαμβάνει ένα δοκιμαστικό
configuration αρχείο για το clustering. Υπάρχουν τρία αρχεία με main συναρτήσεις, ένα για την εύρεση
πλησιέστερων γειτόνων με "LSH", ένα για την εύρεση πλησιέστερων γέιτόνων με την τυχαία προβολή στον υπερκύβο
και ενα για τη συσταδοποίηση. Τα αρχεία αυτά είναι τα "LSHMain.cpp", "hyperMain.cpp" και "clusterMain.cpp"
αντίστοιχα. Ακολουθεί περιγραφή των modules του κώδικα.

->	LSH.cpp/LSH.hpp

	Στα αρχεία αυτά υλοποιείται η κλάση LSH η οποία περιλαμβάνει ότι ειναι απαραίτητο για την εύρεση πλησιέστερων 
	γειτόνων με τον αλγόριθμο "Locality Sensitive Hashing". Έχει ως μέλη τις παραμέτρους του αλγορίθμου, έναν 
	πίνακα πινάκων κατακερματισμού, ένα σύνολο συναρτήσεων κατακερματισμού g, μία λίστα απο δείκτες σε 
	σημεία (τα οποία αποτελούν το σύνολο δεδομένων), μία λίστα από "γείτονες" που έχουν υπολογιστεί μέσω 
	του αλγορίθμου "LSH" και μία λίστα απο "γείτονες" που έχουν υπολογιστεί από εξαντλητική αναζήτηση. Οι 
	μέθοδοι της κλάσης περιλαμβάνουν, μεταξύ άλλων, την "calculateNN" η οποία δέχεται ως ορίσματα το σημείο 
	για το οποίο αναζητάμε γείτονες, τον αριθμό των πλησιέστερων γειτόνων που αναζητάμε, και r το μήκος της
	ακτίνας αναζήτησης. Η μέθοδος αυτή χρησιμοποιεί την μέθοδο "LSHSearch" στην οποία ουσιαστικά ύλοποιείται 
	ο βασικός αλγόριθμος, την bruteForceSearch στην οποία υλοποιείται ο εξαντλητικός αλγόριθμος και την 
	"displayResults" η οποία εκτυπώνει τα αποτελέσματα στο αρχείο εξόδου.  Επίσης, υπάρχει η μέθοδος "addPoint"
	η οποία δέχεται ως όρισμα δείκτη σε ένα σημείο το οποίο πρόκειται να εισαχθεί στο σύνολο δεδομένων. Στην 
	κλάση υπάρχει, η μέθοδος "getNearestByR" η οποία χρησιμοποιείται στη συσταδοποίηση. Τέλος, υπάρχει η στατική 
	μέθοδος "calculateW" η οποία χρησιμοποιείται για τον υπολογισμό της παραμέτρου w δεδομένου του συνόλου δεδομένων.

->	hypercube.cpp/hypercube.hpp

	Στα αρχεία αυτά υλοποιείται η κλάση Hypercube η οποία λειτουργεί με παρόμοιο τρόπο με την κλάση LSH, με τις
	απαραίτητες διαφοροποιήσεις ώστε να υλοποιείται ο αλγόριθμος προβολής στον υπερκύβο. Μία απο τις σημαντικές
	διαφοροποιήσεις είναι οτι χρησιμοποιείται διαφορετικό είδος συναρτήσεων κατακερματισμού (hashFunctionF). 

->	kmeans.cpp/kmeans.hpp

->	point.cpp/point.hpp
	
	Στα συγκεκριμένα αρχεία υλοποιείται η κλάση Point η οποία αναπαριστά ένα σημείο, κάνοντας χρήση της δομής
	vector της STL βιβλιοθήκης. Η κλάση περιλαμβάνει επίσης ως μέλος το id του σημείου καθώς και 2 ακόμα μέλη που 
	χρησιμοποιούνται στη συσταδοποίηση. Στις μεθόδους της κλάσης περιλαμβάνονται, μεταξύ άλλων, η μέθοδος η 
	οποία επιστρέφει την απόσταση του σημείου από ένα άλλο χρησιμοποιώντας τη μετρική L2.

->	hashtable.cpp/hashtable.hpp
	
	Στα συγκεκριμένα αρχεία υλοποιείται η δομή δεδομένων ενός πίνακα κατακερματισμού η οποία χρησιμοποιείται 
	εκτενώς στο πρόγραμμα. Γίνεται χρήση της λίστας που περιλαμβάνεται στη βιβλιοθήκη STL.

->	randGen.cpp/randGen.hpp

	Στα συγκεκριμένα αρχεία βρίσκονται συναρτήσεις η οποίες επιστρέφουν τυχαίους αριθμούς με βάση την κανονική
	και την ομοιόμορφη κατανομή.

->	hashFunction*.cpp/hashFunction*.cpp
	
	Στα συγκεκριμένα αρχεία βρίσκονται συναρτήσεις η οποίες λειτουργούν ως συναρτήσεις κατακερματισμού για
	τους αλγορίθμους "LSH" και τυχαίας προβολής σε υπερκύβο.

->	readInput.cpp/readInput.hpp

	Στα αρχεία αυτά βρίσκονται συναρτήσεις οι οποίες αφορούν την ανάγνωση των ορισμάτων της γραμμής εντολών,
	την ανάγνωση των αρχείων με τα σύνολα δεδομένων και την ανάγνωση του configuration αρχείου, στην περίπτωση
	της συσταδοποίησης.

->	hamming.cpp/hamming.hpp
	
	Στα συγκεκριμένα αρχεία υλοποιείται η κλάση Hamming η οποία χρησιμοποιείται για την αναζήτηση γειτονικών
	κορυφών στον αλγόριθμο τυχαίας προβολής στον υπερκύβο.

->	cluster.cpp/cluster.hpp

	Στα συγκεκριμένα αρχεία υλοποιείται η κλάση Cluster η οποία αναπαριστά μία συστάδα διατηρώντας μία λίστα
	με δείκτες στα σημεία που έχουν ανατεθεί στη συστάδα αυτή και τη θέση του κεντροειδούς της συστάδας. Στις
	μεθόδους υπάρχει, μεταξύ άλλων, συνάρτηση για τον επαναυπολογισμό των συντεταγμένων του κεντροδειδούς.

Παραδοχές
-------------------------------------------------------------------------------------------------------------
k<=32

Σχολιασμός Παραμετροποίησης
-------------------------------------------------------------------------------------------------------------
LSH:

->  Παράμετρος w

	Παρατηρούμε ότι για πολύ μεγάλες τιμές w ο αλγόριθμος LSH προσεγγίζει τα αποτελέσματα του αλγορίθμου
	ωμής βίας, καθώς όλο και περισσότερα σημεία προβάλονται στο ίδιο τμήμα της ευθείας και κατ'επέκταση
	στο ίδιο bucket. Αυτή η παρατήρηση επιβεβαίωνεται από τη θεωρία, σύμφωνα με την οποία το μήκος του
	κάθε τμήματος της ευθείας εξαρτάται άμεσα από το w. Προφανώς με πολύ μεγάλες τιμές της w, ο χρόνος
	αναζήτησης γίνεται ανάλογος του χρόνου της ωμής βίας αφού εξετάζουμε σχεδόν όλα τα σημεία του συνόλου
	δεδομένων. Από την άλλη, καθώς μειώνεται το w, μειώνεται ο χρόνος αναζήτησης, αφού εξετάζονται λιγότερα
	σημεία, υπάρχει όμως μείωση στην ακρίβεια των αποτελεσμάτων. Ως εκ τούτου, επιδιώκεται μία ενδιάμεση τιμή
	η οποία είναι ανάλογη της μέσης απόστασης μεταξύ των σημείων, ώστε να έχουμε σημαντική βελτίωση στο
	χρόνο εκτέλεσης, διατηρώντας υψηλή ακρίβεια.

->  Παράμετρος L

	Παρατηρούμε ότι καθώς μεγαλώνει ο αριθμός των πινάκων κατακερματισμού, αυξάνεται η ακρίβεια εύρεσης
	πλησιέστερου γείτονα αφού στην είναι πολύ πιο πιθανό να υπάρχει πραγματικά κοντινός γείτονας σε
	τουλάχιστον ένα από τους L πίνακες κατακερματισμού. Παράλληλα όμως, αυξάνεται και ο χρόνος αναζήτησης
	αφού εξετάζουμε περισσότερα σημεία. Για πολύ μικρές τιμές του L, παρατηρούμε σχετικά μεγαλύτερη 
	αστάθεια των αποτελεσμάτων, διότι επικρατεί η τυχαιοκρατική φύση του αλγορίθμου.

->  Παράμετρος k

	
